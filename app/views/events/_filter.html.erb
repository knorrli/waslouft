<section class="filter flex flex-col gap-medium" >
  <%= form_with url: events_path, method: :get, id: 'filter-form', class: 'flex flex-col gap-medium', html: { autocomplete: 'off' }, data: { filter_target: 'form', turbo_frame: '_top' } do |f| %>
    <%= f.hidden_field 'f', value: @filter.id, data: { filter_target: 'filterIdInput' } %>

    <div class="input-wrapper flex flex-row gap-small" data-action="hw-combobox:selection->filter#addStyleOrQuery">
      <% if @filter.style_list.present? || @filter.queries.present? %>
        <div class="chips flex flex-row wrap gap-small">
          <% @filter.style_list.each do |style| %>
            <%= button_tag type: :button, class: class_names(:tag, :active), data: { action: 'filter#removeStyle', filter_value_param: style.to_s } do %>
              <div class="flex gap-small">
                <span class="<%= tag_icon_class(context: 'styles') %>"></span>
                <span><%= style %></span>
              </div>
            <% end %>
          <% end %>

          <% @filter.queries.each do |query| %>
            <%= button_tag type: :button, class: class_names(:tag, :active), data: { action: 'filter#removeQuery', filter_value_param: query.to_s } do %>
              <div class="flex gap-small">
                <span class="<%= tag_icon_class(context: 'query') %>"></span>
                <span><%= query %></span>
              </div>
            <% end %>
          <% end %>
        </div>
      <% end %>

      <%= f.hidden_field 'q[]', value: '', data: { filter_target: 'comboboxInput queriesInput', existing_values: @filter.queries.to_json } %>
      <%= f.combobox('s[]', combobox_options(available_tags(context: :styles, applied: @filter.style_list), render_in: { partial: 'tags/chip' }, value: :name), input: { data: { action: 'input->filter#switchQueryHandle' } }, name_when_new: 'query', placeholder: t('.what')) do |combobox| %>
        <% combobox.customize_fieldset class: 'flex-grow' %>
        <% combobox.customize_hidden_field data: { filter_target: 'comboboxInput stylesInput', existing_values: @filter.style_list.to_json } %>
        <% combobox.customize_handle class: "filter-icon #{tag_icon_class(context: 'styles')}", data: { filter_target: 'queryHandle', default_handle: tag_icon_class(context: 'styles') } %>
      <% end %>
    </div>

    <div class="input-wrapper flex flex-row gap-small" data-action="hw-combobox:selection->filter#addLocation">
      <% if @filter.location_list.any? %>
        <div class="chips flex flex-row wrap gap-small">
          <% @filter.location_list.each do |location| %>
            <%= button_tag type: :button, class: class_names(:tag, :active), data: { action: 'filter#removeLocation', filter_value_param: location.to_s } do %>
              <div class="flex gap-small">
                <span class="<%= tag_icon_class(context: 'locations') %>"></span>
                <span><%= location %></span>
              </div>
            <% end %>
          <% end %>
        </div>
      <% end %>

      <%= f.combobox 'l[]', combobox_options(available_tags(context: :locations, applied: @filter.location_list), render_in: { partial: 'tags/chip' }, value: :name), placeholder: t('.where') do |combobox| %>
        <% combobox.customize_fieldset class: 'flex-grow' %>
        <% combobox.customize_hidden_field value: 'test', data: { filter_target: 'comboboxInput locationsInput', existing_values: @filter.location_list.to_json } %>
        <% combobox.customize_handle class: "filter-icon #{tag_icon_class(context: 'locations')}" %>
      <% end %>
    </div>

    <div class="datepicker input-wrapper flex gap-small" data-controller="datepicker" data-datepicker-date-range-value="" data-datepicker-date-ranges-value="<%= @filter.date_ranges.to_json %>" data-datepicker-lang-value="<%= I18n.locale %>" data-datepicker-preset-value="<%= Datepicker.preset.to_json %>" data-action="datepicker:selection->filter#addDateRange datepicker:removal->filter#removeDateRange" data-datepicker-target="wrapper">
      <%= f.hidden_field 'd[]', id: 'd[]-hidden-input', data: { filter_target: 'comboboxInput dateRangesInput', existing_values: @filter.date_ranges.to_json } %>
      <% if @filter.date_ranges.any? %>
        <div class="chips flex flex-row wrap gap-small">
          <% @filter.date_ranges.each do |date_range| %>
            <%= button_tag type: :button, class: class_names(:tag, :active), data: { action: 'filter#removeDateRange', filter_value_param: date_range.to_s } do %>
              <div class="flex gap-small">
                <span class="<%= tag_icon_class(context: 'date') %>"></span>
                <span><%= datepicker_tag_content(date_range) %></span>
              </div>
            <% end %>
          <% end %>
        </div>
      <% end %>
      <div class="flex-grow">
        <div class="hw-combobox__main__wrapper flex flex-grow">
          <%= text_field_tag '', nil, id: 'd[]', readonly: true, placeholder: t('.when'), data: { datepicker_target: 'input' } %>
          <span class="datepicker-handle filter-icon ti-calendar" data-action="click->datepicker#toggle"></span>
        </div>
      </div>
    </div>
  <% end %>

  <%= form_with model: @filter, class: 'flex flex-col gap-large', data: { turbo_frame: '_top', filter_target: 'filterForm' } do |f| %>
    <%= f.hidden_field :queries, value: @filter.queries.join(','), data: { source_name: 'q[]', filter_target: 'filterInput' } %>
    <%= f.hidden_field :style_list, value: @filter.style_list.join(','), data: { source_name: 's[]', filter_target: 'filterInput' } %>
    <%= f.hidden_field :location_list, value: @filter.location_list.join(','), data: { source_name: 'l[]', filter_target: 'filterInput' } %>
    <%= f.hidden_field :date_ranges, value: @filter.date_ranges.join(','), data: { source_name: 'd[]', filter_target: 'filterInput' } %>

    <div class="flex flex-row gap-medium justify-between">
      <div class="filter-select input-wrapper flex flex-grow flex-wrap gap-large justify-between" data-action="hw-combobox:selection->filter#updateFilter">
        <%= combobox_tag 'f', Filter.order(name: :asc), value: @filter.id, name_when_new: 'filter[name]', placeholder: t('.filter'), data: { original_value: @filter.name.to_s, action: 'input->filter#updateControlsStatus click->filter#clearFilter'  } do |combobox| %>
          <% combobox.customize_fieldset class: 'flex-grow' %>
          <% combobox.customize_hidden_field data: { filter_target: 'filterIdInput' } %>
          <% if @filter.persisted? %>
            <% combobox.customize_handle class: "filter-icon ti-close" %>
          <% else %>
            <% combobox.customize_handle class: "filter-icon ti-filter" %>
          <% end %>
        <% end %>
      </div>

      <div class="actions flex gap-small">
        <%= submit_tag t('actions.save'), class: 'filter-button', disabled: (@filter.new_record? || !@filter.changed?), data: { turbo_frame: '_top', action: 'filter#updateFilter:prevent:stop', filter_target: 'enabledWhenModifiedControl' } %>
        <% if @filter.persisted? %>
          <%= link_to t('actions.delete'), filter_path(@filter), class: 'button delete', data: { turbo_method: :delete, turbo_frame: '_top', filter_target: 'disabledWhenModified' } %>
        <% end %>
      </div>
    </div>

    <% if @filter.persisted? %>
      <div class="flex">
        <%= link_to calendar_url(@filter, protocol: :webcal, format: :ics), calendar_url(@filter, protocol: :webcal, format: :ics), readonly: true, class: 'flex-grow' %>
      </div>
    <% end %>
  <% end %>
</section>

